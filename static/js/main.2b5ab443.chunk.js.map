{"version":3,"sources":["history.js","Components/Home/Home.js","Components/Header.js","Components/Results/Results.js","App.js","linearRegression/formatInput.js","linearRegression/linearRegression.js","reducers/pageReducer.js","reducers/store.js","index.js"],"names":["createBrowserHistory","Home","props","handleChange","event","updateInput","target","value","handleClick","calculateRegression","bind","className","Slider","this","alpha","onChange","updateAlpha","aria-labelledby","valueLabelDisplay","min","step","max","iterations","updateIterations","placeholder","inputData","Button","onClick","Component","connect","state","page","inputString","dispatch","type","input","Header","style","textAlign","fontFamily","href","color","textDecoration","rel","Results","Plot","createPlotlyComponent","Plotly","data","name","x","y","mode","marker","predictions","line","width","layout","height","title","config","staticPlot","arrayData","App","history","path","formatInput","valid","split","data2","forEach","push","data3","map","number","Number","tensorData","tf","print","shape","arraySync","predictY","xData","theta","reshape","console","log","linearRegression","transpose","gather","yData","outputTheta","m","i","part2","mul","gradientDescent","initialState","runTime","allReducers","combineReducers","action","formattedData","outputPredictions","alert","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b5ab443.chunk.js","sourcesContent":["// history.js\r\nimport { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();\r\n","import React, { Component } from 'react'\r\nimport {\r\n  Link,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nimport {connect} from 'react-redux'\r\nimport \"./home.css\"\r\nimport history from \"../../history\"\r\nimport { Button,Slider } from '@material-ui/core';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.props = props\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n  handleChange = (event) =>{\r\n    this.props.updateInput(event.target.value)\r\n  }\r\n  handleClick = () =>{\r\n    this.props.calculateRegression()\r\n  }\r\n  render() {\r\n    return (\r\n      <div className = \"homeDiv\">\r\n        <div className = \"slidersDiv\">\r\n          <div className = \"sliderDiv\">\r\n            <label>Alpha:</label>\r\n            <Slider\r\n            value = {this.props.alpha}\r\n            onChange = {(event,value) =>{\r\n              this.props.updateAlpha(value)\r\n            }}\r\n            aria-labelledby=\"Alpha\"\r\n            valueLabelDisplay=\"auto\"\r\n            min={0}\r\n            step = {0.01}\r\n            max={0.5}/>\r\n          </div>\r\n          <div className = \"sliderDiv\">\r\n            <label>Iterations:</label>\r\n            <Slider\r\n            value = {this.props.iterations}\r\n            onChange = {(event,value) =>{\r\n              this.props.updateIterations(value)\r\n            }}\r\n            aria-labelledby=\"Iterations\"\r\n            valueLabelDisplay=\"auto\"\r\n            min={10}\r\n            max={1000}/>\r\n          </div>\r\n        </div>\r\n        <label>\r\n          2D Data to be fitted\r\n        </label>\r\n        <textarea placeholder=\"X data followed by Y data\r\n1,2,3,4,5\r\n2,3,4,5,6\r\n        \" value = {this.props.inputData} onChange = {this.handleChange}>\r\n\r\n        </textarea>\r\n        <br />\r\n        <Button onClick = {this.handleClick}>Calculate</Button>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  inputData: state.page.inputString,\r\n  alpha: state.page.alpha,\r\n  iterations: state.page.iterations,\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateInput : (inputData) =>{\r\n    dispatch({type:\"updateInput\",input:inputData})\r\n  },\r\n  calculateRegression : ()=>{\r\n    dispatch({type:\"calculateRegression\"})\r\n  },\r\n  updateAlpha: (alpha) =>{\r\n    dispatch({type:\"updateAlpha\",alpha:alpha})\r\n  },\r\n  updateIterations:(iterations)=>{\r\n    dispatch({type:\"updateIterations\",iterations:iterations})\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React, { Component } from 'react'\r\n\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div style = {{textAlign: 'center', fontFamily:\"Roboto Mono\"}}>\r\n        <h1>Linear Regression Visualizer</h1>\r\n        <h3>\r\n          <a href = \"https://github.com/Hugo-WB\" target=\"_blank\" style = {{color:\"black\",textDecoration:\"none\"}} rel=\"noopener noreferrer\">\r\n            By Hugo Wong-Berard\r\n          </a>\r\n        </h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport Plotly from \"plotly.js\"\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nimport \"./results.css\"\r\n\r\nclass Results extends Component {\r\n  constructor(props){\r\n    super(props)\r\n  }\r\n  render() {\r\n    const Plot = createPlotlyComponent(Plotly);\r\n    return (\r\n      <div className = \"resultsContainer\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              name: \"data\",\r\n              x: this.props.data[0],\r\n              y: this.props.data[1],\r\n              type: 'scatter',\r\n              mode: 'markers',\r\n              marker: {color: 'green'},\r\n            },\r\n            {\r\n              name:\"regression line\",\r\n              type: \"scatter\",\r\n              x: this.props.data[0],\r\n              y:this.props.predictions[0],\r\n              mode:\"lines\",\r\n              line:{\r\n                color:\"rgb(219, 64, 82)\",\r\n                width:2\r\n              }\r\n            }\r\n          ]}\r\n          layout={{width: \"40vw\", height: \"40vh\", title: 'Data with regression'}}\r\n          config = {{staticPlot: true}}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  data : state.page.arrayData,\r\n  predictions: state.page.predictions,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Results)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n  Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./Components/Home/Home\"\r\nimport Header from \"./Components/Header\"\r\nimport Results from \"./Components/Results/Results\"\r\nimport \"./App.css\"\r\n\r\nimport history from \"./history.js\"\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return (\r\n      <Router history={history}>\r\n        <div className = \"mainDiv\">\r\n          <Header />\r\n          <Switch>\r\n            <Route path=\"/results\">\r\n              <Results />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    )\r\n    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import * as tf from \"@tensorflow/tfjs\"\r\n\r\nlet formatInput = (input) =>{\r\n  let valid = true\r\n  let data = input.split(\"\\n\")\r\n  let data2 = []\r\n  data.forEach(line => {\r\n    data2.push((line.split(\",\")))\r\n  });\r\n  let data3 = data2.map((line)=>\r\n    line.map((number)=>\r\n      Number(number)\r\n    )\r\n  )\r\n  let tensorData = tf.tensor(data3)\r\n  tensorData.print()\r\n  if ((tensorData.shape[0]<2) || (tensorData.shape[1]<2)|| (tensorData.shape[0]>2)){\r\n    valid = false\r\n  }\r\n  let arrayData = tensorData.arraySync()\r\n\r\n  // console.log(\"potato\")\r\n  // let a = tf.tensor([1,2,3],[1,3])\r\n  // let b = tf.tensor([[4,5],[7,8],[9,10]],[3,2])\r\n  // a.print()\r\n  // tf.ones([b.shape[0],1]).print()\r\n  // b.print()\r\n  // console.log(tf.sum(b).arraySync())\r\n  return [tensorData,arrayData,valid]\r\n}\r\n\r\nexport default formatInput","import * as tf from \"@tensorflow/tfjs\"\r\n\r\n\r\nlet costFunction = (xData,yData,theta) =>{\r\n  const m = xData.shape[0]\r\n  let part1 = tf.sum(tf.square(tf.sub(tf.matMul(xData,theta),yData))).arraySync()\r\n  return ((1/(2*m))*(part1))\r\n}\r\n\r\nlet predictY = (xData,theta) =>{\r\n  let predictions = tf.matMul(xData,theta).reshape([1,-1]).arraySync()\r\n  console.log(predictions)\r\n  return predictions\r\n}\r\n\r\nlet gradientDescent = (xData,yData,theta,alpha,iterations) =>{\r\n  const m = xData.shape[0]\r\n  for (let i = 0; i < iterations; i++) {\r\n    // console.log(i)\r\n    let part2 = tf.sub(tf.matMul(xData,theta),yData)\r\n    theta = tf.sub(theta,tf.matMul(xData.transpose(),part2).mul(tf.scalar(alpha/m)))\r\n    // theta.print()\r\n    // console.log(costFunction(xData,yData,theta))\r\n  }\r\n  return theta\r\n}\r\n\r\nlet linearRegression = (data,alpha,iterations) =>{\r\n  const axis = 1\r\n  data = data.transpose()\r\n  data.print()\r\n  data = tf.concat([tf.ones([data.shape[0],1]),data],axis)\r\n  let xData = data.gather([0,1],1)\r\n  let yData = data.gather([2],1)\r\n  console.log(\"XDATA Y DATA\")\r\n  xData.print()\r\n  yData.print()\r\n  data.print()\r\n  let outputTheta = gradientDescent(xData,yData,tf.tensor([0,0],[2,1]),alpha,iterations)\r\n  outputTheta.print()\r\n  return [outputTheta,predictY(xData,outputTheta)]\r\n}\r\n\r\nexport default linearRegression","\r\nimport history from \"../history.js\"\r\nimport formatInput from \"../linearRegression/formatInput\"\r\nimport linearRegression from \"../linearRegression/linearRegression\"\r\nconst initialState = {\r\n  inputString: \"\",\r\n  inputData: [],\r\n  arrayData:[[-1,1,2,3,4,5],[-1,1,2,3,4,5]],\r\n  theta: [],\r\n  predictions:[],\r\n  alpha: 0.01,\r\n  iterations: 500,\r\n  runTime:0,\r\n}\r\n\r\nexport default (state = initialState,action)=>{\r\n  switch (action.type){\r\n    case \"updateInput\":\r\n      return {\r\n        ...state,\r\n        inputString: action.input\r\n      }\r\n    case \"calculateRegression\":\r\n      let [formattedData,arrayData,valid] = formatInput(state.inputString)\r\n      console.log(\"passed format input\")\r\n      console.log(history)\r\n      if(valid){\r\n        history.push(\"/results\")\r\n        let [outputTheta,outputPredictions] = linearRegression(formattedData,state.alpha,state.iterations)\r\n        return{\r\n          ...state,\r\n          inputData: formattedData,\r\n          arrayData: arrayData,\r\n          theta: outputTheta,\r\n          predictions:outputPredictions,\r\n        }\r\n      }\r\n      else{\r\n        alert(\"the data you entered is not valid please try again\")\r\n        return{\r\n          ...state\r\n        }\r\n      }\r\n    case \"updateAlpha\":\r\n      return{\r\n        ...state,\r\n        alpha:action.alpha\r\n      }\r\n    case \"updateIterations\":\r\n      return {\r\n        ...state,\r\n        iterations: action.iterations,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import {combineReducers} from 'redux';\r\nimport pageReducer from \"./pageReducer\"\r\nconst allReducers = combineReducers({\r\n    page:pageReducer,\r\n})\r\n\r\nexport default allReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore} from 'redux';\r\n\r\nimport allReducers from \"./reducers/store\"\r\n\r\nconst store = createStore(allReducers)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}